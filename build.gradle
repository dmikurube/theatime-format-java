plugins {
    id "java"
    id "maven-publish"
    id "signing"
    id "checkstyle"
}

repositories {
    mavenCentral()
}

group = "org.theatime"
version = "0.1.0-SNAPSHOT"
description = "A date-time formatter to/from a string"

configurations {
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()

    reftestLibcImplementation.extendsFrom testImplementation
    reftestLibcRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    options.encoding = "UTF-8"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }

    withJavadocJar()
    withSourcesJar()
}

sourceSets {
    reftestLibc {
        java {
            srcDir "src/reftestLibc/java"
        }
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

dependencies {
    testImplementation platform(group: "org.junit", name: "junit-bom", version: "5.13.2")
    testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-api")
    testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-params")

    testRuntimeOnly(group: "org.junit.jupiter", name: "junit-jupiter-engine")
    testRuntimeOnly(group: "org.junit.platform", name: "junit-platform-launcher")
}

javadoc {
    title = "${project.name} v${project.version}"
    options {
        locale = "en_US"
        encoding = "UTF-8"
        links "https://docs.oracle.com/javase/8/docs/api/"
    }
}

jar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

sourcesJar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

javadocJar {
    metaInf {
        from rootProject.file("LICENSE")
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name

            from components.java
            // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
            // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

            pom {  // https://central.sonatype.org/pages/requirements.html
                packaging "jar"

                name = project.name
                description = project.description
                url = "https://github.com/dmikurube/theatime-format-java"

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        name = "Dai MIKURUBE"
                        email = "dmikurube@acm.org"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/dmikurube/theatime-format-java.git"
                    developerConnection = "scm:git:git@github.com:dmikurube/theatime-format-java.git"
                    url = "https://github.com/dmikurube/theatime-format-java"
                }
            }
        }
    }

    repositories {
        maven {  // publishMavenPublicationToMavenCentralRepository
            name = "mavenCentral"
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }

            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

signing {
    if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        logger.lifecycle("Signing with an in-memory key.")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.maven
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        outputs.upToDateWhen { false }
    }
}

task reftestLibc(type: Test) {
    if (project.hasProperty("reftestLibcTryStrftime")) {
        systemProperty "reftestLibcTryStrftime", getProperty("reftestLibcTryStrftime")
    }
    if (project.hasProperty("reftestLibcTryStrptime")) {
        systemProperty "reftestLibcTryStrptime", getProperty("reftestLibcTryStrptime")
    }

    classpath = sourceSets.reftestLibc.runtimeClasspath
    testClassesDirs = sourceSets.reftestLibc.output.classesDirs

    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        outputs.upToDateWhen { false }
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
    }
}

checkstyle {
    toolVersion = "9.3"
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
        "org.checkstyle.google.suppressionfilter.config": file("${rootProject.projectDir}/config/checkstyle/checkstyle-suppressions.xml")
    ]
    ignoreFailures = false
    maxWarnings = 0  // https://github.com/gradle/gradle/issues/881
}
