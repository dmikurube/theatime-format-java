/*
 * Copyright 2023 Dai MIKURUBE, and generated by Claude Code.
 */

package org.theatime.format.posix;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

public class TestPosixTimeFormat {
    @Test
    public void testEmpty() {
        assertFormat("");
    }

    @Test
    public void testEndWithSinglePercent() {
        assertFormat("%", Literal.of("%", C));
        assertFormat("foo%", Literal.of("foo", C), Literal.of("%", C));
    }

    @Test
    public void testLowerA() {
        assertFormat("%a", new LowerA(C));
        assertFormat("%0a", new LowerA(new Specification.Context(false, false, 0, -1, '0', '\0', "", 0, 0)));
    }

    @Test
    public void testLowerE() {
        assertFormat("%e", new LowerE(C));
        assertFormat("%0e", new LowerE(new Specification.Context(false, false, 0, -1, '0', '\0', "", 0, 0)));
        assertFormat("%_e", new LowerE(new Specification.Context(false, false, -1, -1, '_', '\0', "", 0, 0)));
        assertFormat("%-e", new LowerE(new Specification.Context(false, false, -1, -1, '-', '\0', "", 0, 0)));
        assertFormat("%3e", new LowerE(new Specification.Context(false, false, 3, -1, '\0', '\0', "", 0, 0)));
    }

    @Test
    public void testLowerD() {
        assertFormat("%d", new LowerD(C));
        assertFormat("%0d", new LowerD(new Specification.Context(false, false, 0, -1, '0', '\0', "", 0, 0)));
        assertFormat("%_d", new LowerD(new Specification.Context(false, false, -1, -1, '_', '\0', "", 0, 0)));
        assertFormat("%-d", new LowerD(new Specification.Context(false, false, -1, -1, '-', '\0', "", 0, 0)));
        assertFormat("%4d", new LowerD(new Specification.Context(false, false, 4, -1, '\0', '\0', "", 0, 0)));
    }

    @Test
    public void testLowerM() {
        assertFormat("%m", new LowerM(C));
        assertFormat("%0m", new LowerM(new Specification.Context(false, false, 0, -1, '0', '\0', "", 0, 0)));
        assertFormat("%_m", new LowerM(new Specification.Context(false, false, -1, -1, '_', '\0', "", 0, 0)));
        assertFormat("%-m", new LowerM(new Specification.Context(false, false, -1, -1, '-', '\0', "", 0, 0)));
        assertFormat("%4m", new LowerM(new Specification.Context(false, false, 4, -1, '\0', '\0', "", 0, 0)));
    }

    @Test
    public void testUpperY() {
        assertFormat("%Y", new UpperY(C));
        assertFormat("%0Y", new UpperY(new Specification.Context(false, false, 0, -1, '0', '\0', "", 0, 0)));
        assertFormat("%_Y", new UpperY(new Specification.Context(false, false, -1, -1, '_', '\0', "", 0, 0)));
        assertFormat("%-Y", new UpperY(new Specification.Context(false, false, -1, -1, '-', '\0', "", 0, 0)));
        assertFormat("%6Y", new UpperY(new Specification.Context(false, false, 6, -1, '\0', '\0', "", 0, 0)));
    }

    @Test
    public void testUpperH() {
        assertFormat("%H", new UpperH(C));
        assertFormat("%0H", new UpperH(new Specification.Context(false, false, 0, -1, '0', '\0', "", 0, 0)));
        assertFormat("%_H", new UpperH(new Specification.Context(false, false, -1, -1, '_', '\0', "", 0, 0)));
        assertFormat("%-H", new UpperH(new Specification.Context(false, false, -1, -1, '-', '\0', "", 0, 0)));
        assertFormat("%3H", new UpperH(new Specification.Context(false, false, 3, -1, '\0', '\0', "", 0, 0)));
    }

    @Test
    public void testUpperI() {
        assertFormat("%I", new UpperI(C));
        assertFormat("%0I", new UpperI(new Specification.Context(false, false, 0, -1, '0', '\0', "", 0, 0)));
        assertFormat("%_I", new UpperI(new Specification.Context(false, false, -1, -1, '_', '\0', "", 0, 0)));
        assertFormat("%-I", new UpperI(new Specification.Context(false, false, -1, -1, '-', '\0', "", 0, 0)));
        assertFormat("%3I", new UpperI(new Specification.Context(false, false, 3, -1, '\0', '\0', "", 0, 0)));
    }

    @Test
    public void testUpperS() {
        assertFormat("%S", new UpperS(C));
        assertFormat("%0S", new UpperS(new Specification.Context(false, false, 0, -1, '0', '\0', "", 0, 0)));
        assertFormat("%_S", new UpperS(new Specification.Context(false, false, -1, -1, '_', '\0', "", 0, 0)));
        assertFormat("%-S", new UpperS(new Specification.Context(false, false, -1, -1, '-', '\0', "", 0, 0)));
        assertFormat("%3S", new UpperS(new Specification.Context(false, false, 3, -1, '\0', '\0', "", 0, 0)));
    }

    @Test
    public void testUpperM() {
        assertFormat("%M", new UpperM(C));
        assertFormat("%0M", new UpperM(new Specification.Context(false, false, 0, -1, '0', '\0', "", 0, 0)));
        assertFormat("%_M", new UpperM(new Specification.Context(false, false, -1, -1, '_', '\0', "", 0, 0)));
        assertFormat("%-M", new UpperM(new Specification.Context(false, false, -1, -1, '-', '\0', "", 0, 0)));
        assertFormat("%3M", new UpperM(new Specification.Context(false, false, 3, -1, '\0', '\0', "", 0, 0)));
    }

    @Test
    public void testLiteral() {
        assertFormat("foo",
                     Literal.of("foo", C));
        assertFormat("%&",
                     Literal.of("%&", C));
        assertFormat("%10&",
                     Literal.of("%10&", new Specification.Context(false, false, 10, -1, '0', '\0', "", 0, 0)));
        assertFormat("foo%&bar",
                     Literal.of("foo", C),
                     Literal.of("%&", C),
                     Literal.of("bar", C));
        assertFormat("%&foo%&",
                     Literal.of("%&", C),
                     Literal.of("foo", C),
                     Literal.of("%&", C));
        assertFormat("%&foo%&bar%&",
                     Literal.of("%&", C),
                     Literal.of("foo", C),
                     Literal.of("%&", C),
                     Literal.of("bar", C),
                     Literal.of("%&", C));
        assertFormat("foo%&bar%&baz",
                     Literal.of("foo", C),
                     Literal.of("%&", C),
                     Literal.of("bar", C),
                     Literal.of("%&", C),
                     Literal.of("baz", C));
    }

    @Test
    public void testMixed() {
        assertFormat("foo%bbar",
                     Literal.of("foo", C),
                     new LowerB(C),
                     Literal.of("bar", C));
        assertFormat("%bfoo%a",
                     new LowerB(C),
                     Literal.of("foo", C),
                     new LowerA(C));
        assertFormat("foo%&bar%bbaz",
                     Literal.of("foo", C),
                     Literal.of("%&", C),
                     Literal.of("bar", C),
                     new LowerB(C),
                     Literal.of("baz", C));
        assertFormat("foo%bbar%&baz",
                     Literal.of("foo", C),
                     new LowerB(C),
                     Literal.of("bar", C),
                     Literal.of("%&", C),
                     Literal.of("baz", C));
        assertFormat("foo%&bar%bbaz%a",
                     Literal.of("foo", C),
                     Literal.of("%&", C),
                     Literal.of("bar", C),
                     new LowerB(C),
                     Literal.of("baz", C),
                     new LowerA(C));
        assertFormat("foo%bbar%&baz%a",
                     Literal.of("foo", C),
                     new LowerB(C),
                     Literal.of("bar", C),
                     Literal.of("%&", C),
                     Literal.of("baz", C),
                     new LowerA(C));
        assertFormat("foo%&bar%bbaz%$",
                     Literal.of("foo", C),
                     Literal.of("%&", C),
                     Literal.of("bar", C),
                     new LowerB(C),
                     Literal.of("baz", C),
                     Literal.of("%$", C));
        assertFormat("foo%bbar%&baz%$",
                     Literal.of("foo", C),
                     new LowerB(C),
                     Literal.of("bar", C),
                     Literal.of("%&", C),
                     Literal.of("baz", C),
                     Literal.of("%$", C));
        assertFormat("foo%bbar%&baz%",
                     Literal.of("foo", C),
                     new LowerB(C),
                     Literal.of("bar", C),
                     Literal.of("%&", C),
                     Literal.of("baz", C),
                     Literal.of("%", C));
        assertFormat("%b %e, %Y",
                     new LowerB(C),
                     Literal.of(" ", C),
                     new LowerE(C),
                     Literal.of(", ", C),
                     new UpperY(C));
    }

    @ParameterizedTest
    @CsvSource({
            "abc",
            "%",
    })
    public void testUnmatch(final String format) {
        assertFormat(format, Literal.of(format, C));
    }

    @Test
    public void testDateTimeFormatter() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%a%A%10q%b%B").toDateTimeFormatter();
        assertEquals("MonMonday      %10qAprApril",
                     formatter.format(ZonedDateTime.of(2023, 4, 17, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    public void testDateTimeFormatter2() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%_10a").toDateTimeFormatter();
        assertEquals("       Mon", formatter.format(ZonedDateTime.of(2023, 4, 17, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    public void testDateTimeFormatter3() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%C ... %y").toDateTimeFormatter();
        assertEquals("20 ... 23", formatter.format(ZonedDateTime.of(2023, 4, 17, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        final TemporalAccessor accessor = formatter.parse("19 ... 87");
        assertEquals(87, accessor.getLong(PosixFields.YEAR_OF_POSIX_CENTURY_1969_2068));
        assertEquals(19, accessor.getLong(PosixFields.POSIX_CENTURY));
        assertEquals(1987, accessor.getLong(ChronoField.YEAR));
    }

    @Test
    public void testDateTimeFormatter4() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%y").toDateTimeFormatter();
        assertEquals(2000, formatter.parse("00").getLong(ChronoField.YEAR));
        assertEquals(2068, formatter.parse("68").getLong(ChronoField.YEAR));
        assertEquals(1969, formatter.parse("69").getLong(ChronoField.YEAR));
        assertEquals(1970, formatter.parse("70").getLong(ChronoField.YEAR));
        assertEquals(1999, formatter.parse("99").getLong(ChronoField.YEAR));
    }

    @Test
    public void testDateTimeFormatter5() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%8A").toDateTimeFormatter();
        assertEquals("  Monday",
                     formatter.format(ZonedDateTime.of(2023, 4, 17, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals(" Tuesday",
                     formatter.format(ZonedDateTime.of(2023, 4, 18, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("Wednesday",
                     formatter.format(ZonedDateTime.of(2023, 4, 19, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("Thursday",
                     formatter.format(ZonedDateTime.of(2023, 4, 20, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    public void testDateTimeFormatter6() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%7B").toDateTimeFormatter();
        assertEquals("January",
                     formatter.format(ZonedDateTime.of(2023, 1, 17, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("February",
                     formatter.format(ZonedDateTime.of(2023, 2, 18, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("  March",
                     formatter.format(ZonedDateTime.of(2023, 3, 19, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("    May",
                     formatter.format(ZonedDateTime.of(2023, 5, 20, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals(" August",
                     formatter.format(ZonedDateTime.of(2023, 8, 20, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("September",
                     formatter.format(ZonedDateTime.of(2023, 9, 20, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    public void testDateTimeFormatter7() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%8A").toDateTimeFormatter();
        System.out.println(formatter.parse("  Monday").getLong(ChronoField.DAY_OF_WEEK));
        System.out.println(formatter.parse(" Tuesday").getLong(ChronoField.DAY_OF_WEEK));
        System.out.println(formatter.parse("Wednesday").getLong(ChronoField.DAY_OF_WEEK));
        System.out.println(formatter.parse("Thursday").getLong(ChronoField.DAY_OF_WEEK));
    }

    @Test
    public void testDateTimeFormatterLowerE() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%e").toDateTimeFormatter();
        assertEquals(" 1", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals(" 9", formatter.format(ZonedDateTime.of(2023, 4, 9, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("17", formatter.format(ZonedDateTime.of(2023, 4, 17, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("31", formatter.format(ZonedDateTime.of(2023, 1, 31, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterLowerEWithPadding() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%0e").toDateTimeFormatter();
        assertEquals("01", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("09", formatter.format(ZonedDateTime.of(2023, 4, 9, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("17", formatter.format(ZonedDateTime.of(2023, 4, 17, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterLowerEWithPrecision() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%4e").toDateTimeFormatter();
        assertEquals("   1", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("   9", formatter.format(ZonedDateTime.of(2023, 4, 9, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("  17", formatter.format(ZonedDateTime.of(2023, 4, 17, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("  31", formatter.format(ZonedDateTime.of(2023, 1, 31, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    public void testDateTimeFormatterLowerD() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%d").toDateTimeFormatter();
        assertEquals("01", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("09", formatter.format(ZonedDateTime.of(2023, 4, 9, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("17", formatter.format(ZonedDateTime.of(2023, 4, 17, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("31", formatter.format(ZonedDateTime.of(2023, 1, 31, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterLowerDWithPadding() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%_d").toDateTimeFormatter();
        assertEquals(" 1", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals(" 9", formatter.format(ZonedDateTime.of(2023, 4, 9, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("17", formatter.format(ZonedDateTime.of(2023, 4, 17, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterLowerDWithPrecision() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%4d").toDateTimeFormatter();
        assertEquals("0001", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("0009", formatter.format(ZonedDateTime.of(2023, 4, 9, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("0017", formatter.format(ZonedDateTime.of(2023, 4, 17, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("0031", formatter.format(ZonedDateTime.of(2023, 1, 31, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    public void testDateTimeFormatterLowerM() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%m").toDateTimeFormatter();
        assertEquals("01", formatter.format(ZonedDateTime.of(2023, 1, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("04", formatter.format(ZonedDateTime.of(2023, 4, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("09", formatter.format(ZonedDateTime.of(2023, 9, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("12", formatter.format(ZonedDateTime.of(2023, 12, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterLowerMWithPadding() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%_m").toDateTimeFormatter();
        assertEquals(" 1", formatter.format(ZonedDateTime.of(2023, 1, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals(" 4", formatter.format(ZonedDateTime.of(2023, 4, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals(" 9", formatter.format(ZonedDateTime.of(2023, 9, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("12", formatter.format(ZonedDateTime.of(2023, 12, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterLowerMWithPrecision() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%4m").toDateTimeFormatter();
        assertEquals("0001", formatter.format(ZonedDateTime.of(2023, 1, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("0004", formatter.format(ZonedDateTime.of(2023, 4, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("0009", formatter.format(ZonedDateTime.of(2023, 9, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("0012", formatter.format(ZonedDateTime.of(2023, 12, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    public void testDateTimeFormatterUpperY() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%Y").toDateTimeFormatter();
        assertEquals("1999", formatter.format(ZonedDateTime.of(1999, 12, 31, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("2000", formatter.format(ZonedDateTime.of(2000, 1, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("2023", formatter.format(ZonedDateTime.of(2023, 6, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("2024", formatter.format(ZonedDateTime.of(2024, 2, 29, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterUpperYWithPadding() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%_Y").toDateTimeFormatter();
        assertEquals("2023", formatter.format(ZonedDateTime.of(2023, 6, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("99", formatter.format(ZonedDateTime.of(99, 6, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterUpperYWithPrecision() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%6Y").toDateTimeFormatter();
        assertEquals("002023", formatter.format(ZonedDateTime.of(2023, 6, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("000099", formatter.format(ZonedDateTime.of(99, 6, 15, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    public void testDateTimeFormatterUpperH() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%H").toDateTimeFormatter();
        assertEquals("00", formatter.format(ZonedDateTime.of(2023, 4, 1, 0, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("09", formatter.format(ZonedDateTime.of(2023, 4, 1, 9, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("12", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("23", formatter.format(ZonedDateTime.of(2023, 4, 1, 23, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterUpperHWithPadding() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%_H").toDateTimeFormatter();
        assertEquals(" 0", formatter.format(ZonedDateTime.of(2023, 4, 1, 0, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals(" 9", formatter.format(ZonedDateTime.of(2023, 4, 1, 9, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("12", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterUpperHWithPrecision() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%3H").toDateTimeFormatter();
        assertEquals("000", formatter.format(ZonedDateTime.of(2023, 4, 1, 0, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("009", formatter.format(ZonedDateTime.of(2023, 4, 1, 9, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("012", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("023", formatter.format(ZonedDateTime.of(2023, 4, 1, 23, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterUpperI() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%I").toDateTimeFormatter();
        assertEquals("12", formatter.format(ZonedDateTime.of(2023, 4, 1, 0, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("09", formatter.format(ZonedDateTime.of(2023, 4, 1, 9, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("12", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("11", formatter.format(ZonedDateTime.of(2023, 4, 1, 23, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterUpperIWithPadding() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%_I").toDateTimeFormatter();
        assertEquals("12", formatter.format(ZonedDateTime.of(2023, 4, 1, 0, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals(" 9", formatter.format(ZonedDateTime.of(2023, 4, 1, 9, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("12", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterUpperIWithPrecision() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%3I").toDateTimeFormatter();
        assertEquals("012", formatter.format(ZonedDateTime.of(2023, 4, 1, 0, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("009", formatter.format(ZonedDateTime.of(2023, 4, 1, 9, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("012", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("011", formatter.format(ZonedDateTime.of(2023, 4, 1, 23, 0, 0, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    public void testDateTimeFormatterUpperS() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%S").toDateTimeFormatter();
        assertEquals("00", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("05", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 5, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("30", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 30, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("59", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 59, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterUpperSWithPadding() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%_S").toDateTimeFormatter();
        assertEquals(" 0", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals(" 5", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 5, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("30", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 30, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterUpperSWithPrecision() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%3S").toDateTimeFormatter();
        assertEquals("000", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 0, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("005", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 5, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("030", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 30, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("059", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 59, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    public void testDateTimeFormatterUpperM() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%M").toDateTimeFormatter();
        assertEquals("00", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 30, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("05", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 5, 30, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("30", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 30, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("59", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 59, 30, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterUpperMWithPadding() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%_M").toDateTimeFormatter();
        assertEquals(" 0", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 30, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals(" 5", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 5, 30, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("30", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 30, 0, ZoneId.of("Asia/Tokyo"))));
    }

    @Test
    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
    public void testDateTimeFormatterUpperMWithPrecision() {
        final DateTimeFormatter formatter = PosixTimeFormat.compile("%3M").toDateTimeFormatter();
        assertEquals("000", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 0, 30, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("005", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 5, 30, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("030", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 30, 30, 0, ZoneId.of("Asia/Tokyo"))));
        assertEquals("059", formatter.format(ZonedDateTime.of(2023, 4, 1, 12, 59, 30, 0, ZoneId.of("Asia/Tokyo"))));
    }

    /*
     * Import test cases that failed in reftests.
     */
    @ParameterizedTest
    @CsvSource({
            "OCT,%^2b,2020,10,26,7,48,59,526929475",
            // "'        29',%-10d,1985,9,29,4,23,20,62491315",
            // "0000000TUE,%0#10a,2008,9,2,5,31,03,340494545",
            "' 1',%e,2023,1,1,12,0,0,0",
            "' 9',%e,2023,1,9,12,0,0,0",
            "'17',%e,2023,1,17,12,0,0,0",
            "'31',%e,2023,1,31,12,0,0,0",
            "'01',%0e,2023,1,1,12,0,0,0",
            "'09',%0e,2023,1,9,12,0,0,0",
            "'   1',%4e,2023,1,1,12,0,0,0",
            "'  17',%4e,2023,1,17,12,0,0,0",
            "'01',%d,2023,1,1,12,0,0,0",
            "'09',%d,2023,1,9,12,0,0,0",
            "'17',%d,2023,1,17,12,0,0,0",
            "'31',%d,2023,1,31,12,0,0,0",
            "' 1',%_d,2023,1,1,12,0,0,0",
            "' 9',%_d,2023,1,9,12,0,0,0",
            "'0001',%4d,2023,1,1,12,0,0,0",
            "'0017',%4d,2023,1,17,12,0,0,0",
            "'01',%m,2023,1,15,12,0,0,0",
            "'04',%m,2023,4,15,12,0,0,0",
            "'09',%m,2023,9,15,12,0,0,0",
            "'12',%m,2023,12,15,12,0,0,0",
            "' 1',%_m,2023,1,15,12,0,0,0",
            "' 4',%_m,2023,4,15,12,0,0,0",
            "'0001',%4m,2023,1,15,12,0,0,0",
            "'0009',%4m,2023,9,15,12,0,0,0",
            "'1999',%Y,1999,12,31,12,0,0,0",
            "'2000',%Y,2000,1,1,12,0,0,0",
            "'2023',%Y,2023,6,15,12,0,0,0",
            "'2024',%Y,2024,2,29,12,0,0,0",
            "'99',%_Y,99,6,15,12,0,0,0",
            "'002023',%6Y,2023,6,15,12,0,0,0",
            "'00',%H,2023,4,1,0,0,0,0",
            "'09',%H,2023,4,1,9,0,0,0",
            "'12',%H,2023,4,1,12,0,0,0",
            "'23',%H,2023,4,1,23,0,0,0",
            "' 0',%_H,2023,4,1,0,0,0,0",
            "' 9',%_H,2023,4,1,9,0,0,0,0",
            "'000',%3H,2023,4,1,0,0,0,0",
            "'023',%3H,2023,4,1,23,0,0,0",
            "'00',%S,2023,4,1,12,30,0,0",
            "'05',%S,2023,4,1,12,30,5,0",
            "'30',%S,2023,4,1,12,30,30,0",
            "'59',%S,2023,4,1,12,30,59,0",
            "' 0',%_S,2023,4,1,12,30,0,0",
            "' 5',%_S,2023,4,1,12,30,5,0",
            "'000',%3S,2023,4,1,12,30,0,0",
            "'059',%3S,2023,4,1,12,30,59,0",
            "'00',%M,2023,4,1,12,0,30,0",
            "'05',%M,2023,4,1,12,5,30,0",
            "'30',%M,2023,4,1,12,30,30,0",
            "'59',%M,2023,4,1,12,59,30,0",
            "' 0',%_M,2023,4,1,12,0,30,0",
            "' 5',%_M,2023,4,1,12,5,30,0",
            "'000',%3M,2023,4,1,12,0,30,0",
            "'059',%3M,2023,4,1,12,59,30,0",
            "'12',%I,2023,4,1,0,0,0,0",
            "'09',%I,2023,4,1,9,0,0,0",
            "'12',%I,2023,4,1,12,0,0,0",
            "'11',%I,2023,4,1,23,0,0,0",
            "'12',%_I,2023,4,1,0,0,0,0",
            "' 9',%_I,2023,4,1,9,0,0,0",
            "'012',%3I,2023,4,1,0,0,0,0",
            "'011',%3I,2023,4,1,23,0,0,0",
    })
    public void testFormatSingleWithDateTimeFormatter(
            final String expectedFormatted,
            final String format,
            final int year,
            final int monthValue,
            final int dayOfMonth,
            final int hourOfDay,
            final int minuteOfHour,
            final int secondOfMinute,
            final int nanoOfSecond) {
        final DateTimeFormatter actualFormatter = PosixTimeFormat.compile(format).toDateTimeFormatter();
        final OffsetDateTime actualDateTime = OffsetDateTime.of(
                year, monthValue, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, nanoOfSecond, ZoneOffset.UTC);
        final String actualFormatted = actualFormatter.format(actualDateTime);
        assertEquals(expectedFormatted, actualFormatted);
    }

    @Test
    public void test1() {
        assertFormat(
                "%nabc",
                Literal.of("\n", C),
                Literal.of("abc", C));
    }

    @Test
    public void test2() {
        assertFormat(
                "abc%nabc",
                Literal.of("abc", C),
                Literal.of("\n", C),
                Literal.of("abc", C));
    }

    @Test
    public void test3() {
        assertFormat(
                "abc%12nabc",
                Literal.of("abc", C),
                Literal.of("\n", C),
                Literal.of("abc", C));
    }

    @ParameterizedTest
    @CsvSource({
            // "%%,%,false,false,-1,-1,,,%%",
            // "%n,n,false,false,-1,-1,,,%n",
            // "%t,t,false,false,-1,-1,,,%t",
            "%12b,b,false,false,12,-1,,,%12b",
            "%z,z,false,false,-1,-1,,,%z",
            "%:z,z,false,false,-1,1,,,%:z",
            "%::z,z,false,false,-1,2,,,%::z",
            "%:::z,z,false,false,-1,3,,,%:::z",
            "%::::z,z,false,false,-1,4,,,%::::z",
    })
    public void testSingles(
            final String format,
            final String expectedChar,
            final String expectedUpperCase,
            final String expectedChangeCase,
            final String expectedPrecision,
            final String expectedColons,
            final String expectedPad,
            final String expectedModifier,
            final String expectedOriginal) {
        assertSingleFormatOptions(
                expectedChar.charAt(0),
                Boolean.parseBoolean(expectedUpperCase),
                Boolean.parseBoolean(expectedChangeCase),
                Integer.parseInt(expectedPrecision),
                Integer.parseInt(expectedColons),
                (expectedPad == null || expectedPad.isEmpty()) ? '\0' : expectedPad.charAt(0),
                (expectedModifier == null || expectedModifier.isEmpty()) ? '\0' : expectedModifier.charAt(0),
                format);
    }

    private void assertFormat(final String format, final Specification... expectedFormatSpecifications) {
        final List<Specification> actual = Tokenizer.tokenize(format);
        assertEquals(Arrays.asList(expectedFormatSpecifications), actual);
        System.out.println("\"" + format + "\"");
        System.out.println(actual);
    }

    private void assertSingleFormatOptions(
            final char expectedChar,
            final boolean expectedUpperCase,
            final boolean expectedChangeCase,
            final int expectedPrecision,
            final int expectedColons,
            final char expectedPad,
            final char expectedModifier,
            final String format) {
        final List<Specification> actual = Tokenizer.tokenize(format);
        assertEquals(1, actual.size());
        assertTrue(actual.get(0) instanceof ConversionSpecification);
        final ConversionSpecification actualConversion = (ConversionSpecification) actual.get(0);
        assertEquals(expectedChar, actualConversion.terminatingConversionSpecifier.toString().charAt(0));
        assertEquals(expectedUpperCase, actualConversion.upperCase);
        assertEquals(expectedChangeCase, actualConversion.changeCase);
        assertEquals(expectedPrecision, actualConversion.precision);
        assertEquals(expectedColons, actualConversion.colons);
        assertEquals(expectedPad, actualConversion.pad);
        assertEquals(expectedModifier, actualConversion.modifier);
    }

    private static Specification.Context C = Specification.EMPTY;
}
